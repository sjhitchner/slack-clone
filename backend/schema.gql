type Team {
    id: ID!
    owner: User!
	name: String!
    members: [User!]!
    channels: [Channel!]!
}

type Channel {
    id: ID!
    name: String!
    isPublic: Boolean!
	owner: User!
	team: Team!
    messages: [Message!]!
    members: [User!]!
}

type Message {
    id: ID!
    text: String!
    user: User!
	timestamp: String!
    channel: Channel!
}

type User {
	id: ID!
    username: String!
    email: String!
    teams: [Team!]!
}

type Query {
    ping: String!

	userTeamList(userId: Int!): [Team!]!
	channelMessageList(channelId: Int!): [Message!]!
	teamChannelList(teamId: Int!): [Channel!]!

	team(id: Int!): Team!
	channel(id: Int!): Channel!
	user(id: Int!): User!
}

input CreateUserInput {
	username: String!
	email: String!
	password: String!
}

input SendMessageInput {
	userId: Int!
	channelId: Int!
	text: String!
}

input CreateTeamInput {
	name: String!
	ownerId: Int!
}

input CreateChannelInput {
	teamId: Int!
	ownerId: Int!
	name: String!
	isPublic: Boolean!
}

input TeamMemberInput {
	teamId: Int!
	userId: Int!
}

input ChannelMemberInput {
	channelId: Int!
	userId: Int!
}

type CreateUserOutput {
	user: User!
}

type CreateTeamOutput {
	team: Team!
}

type CreateChannelOutput {
	channel: Channel!
}

type SendMessageOutput {
	ok: Boolean!
}

type TeamMemberOutput {
	ok: Boolean!
}

type ChannelMemberOutput {
	ok: Boolean!
}

type Mutation {
	createUser(input: CreateUserInput!): CreateUserOutput!
	createTeam(input: CreateTeamInput!): CreateTeamOutput!
	createChannel(input: CreateChannelInput!): CreateChannelOutput!

	addTeamMember(input: TeamMemberInput!): TeamMemberOutput!
	deleteTeamMember(input: TeamMemberInput!): TeamMemberOutput!

	addChannelMember(input: ChannelMemberInput!): ChannelMemberOutput!
	deleteChannelMember(input: ChannelMemberInput!): ChannelMemberOutput!

	sendMessage(input: SendMessageInput!): SendMessageOutput!
}

schema {
	query: Query
	mutation: Mutation
}
